from collections import defaultdict

EXCEPTION_CATEGORY_COUNT = 3

def categorize_exceptions(commonness_set, exceptions):
    """
    Categorizes exceptions based on differences from commonness highlights/types.
    Simplified categorization: Highlight-Change, Type-Change, No-Pattern (though No-Pattern
    should ideally not be in the exceptions list generated by generate_hdp).
    Returns a dictionary mapping category names to lists of exception patterns.
    """
    categorized = defaultdict(list)
    commonness_highlights = set()
    for commonness in commonness_set:
        if commonness: # Ensure commonness is not empty
            commonness_highlights.add(commonness[0].highlight) # Assume all in commonness have same highlight

    for exc_dp in exceptions:
        if exc_dp.type == 'Other Pattern':
            categorized['Type-Change'].append(exc_dp)
        elif exc_dp.type == 'No Pattern':
             # This case should ideally not happen if generate_hdp filters 'No Pattern'
            categorized['No-Pattern'].append(exc_dp)
        elif exc_dp.highlight not in commonness_highlights:
            categorized['Highlight-Change'].append(exc_dp)

        # Keeping this commented out, since I couldn't figure out what to do with something in this catch-all category.
        # For now it will be ignored, but it could maybe be useful.
        # else:
        #      # Exception has a valid pattern type and highlight, but didn't meet commonness threshold
        #      # This could be another category or grouped with Highlight-Change
        #      categorized['Other-Exception'].append(exc_dp) # Add a catch-all category

    return categorized